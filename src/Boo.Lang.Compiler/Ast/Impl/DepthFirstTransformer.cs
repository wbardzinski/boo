#region license
// Copyright (c) 2009 Rodrigo B. de Oliveira (rbo@acm.org)
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//     * Neither the name of Rodrigo B. de Oliveira nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#endregion

//
// DO NOT EDIT THIS FILE!
//
// This file was generated automatically by astgen.boo.
//

namespace Boo.Lang.Compiler.Ast
{
	using System;

	public partial class DepthFirstTransformer : IAstVisitor
	{

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnCompileUnit(Boo.Lang.Compiler.Ast.CompileUnit node)
		{	
			if (EnterCompileUnit(node))
			{
				Visit(node.Modules);

				LeaveCompileUnit(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterCompileUnit(Boo.Lang.Compiler.Ast.CompileUnit node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveCompileUnit(Boo.Lang.Compiler.Ast.CompileUnit node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnTypeMemberStatement(Boo.Lang.Compiler.Ast.TypeMemberStatement node)
		{	
			if (EnterTypeMemberStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				TypeMember currentTypeMemberValue = node.TypeMember;
				if (null != currentTypeMemberValue)
				{			
					TypeMember newValue = (TypeMember)VisitNode(currentTypeMemberValue);
					if (!object.ReferenceEquals(newValue, currentTypeMemberValue))
					{
						node.TypeMember = newValue;
					}
				}

				LeaveTypeMemberStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterTypeMemberStatement(Boo.Lang.Compiler.Ast.TypeMemberStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveTypeMemberStatement(Boo.Lang.Compiler.Ast.TypeMemberStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnExplicitMemberInfo(Boo.Lang.Compiler.Ast.ExplicitMemberInfo node)
		{	
			if (EnterExplicitMemberInfo(node))
			{
				SimpleTypeReference currentInterfaceTypeValue = node.InterfaceType;
				if (null != currentInterfaceTypeValue)
				{			
					SimpleTypeReference newValue = (SimpleTypeReference)VisitNode(currentInterfaceTypeValue);
					if (!object.ReferenceEquals(newValue, currentInterfaceTypeValue))
					{
						node.InterfaceType = newValue;
					}
				}

				LeaveExplicitMemberInfo(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterExplicitMemberInfo(Boo.Lang.Compiler.Ast.ExplicitMemberInfo node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveExplicitMemberInfo(Boo.Lang.Compiler.Ast.ExplicitMemberInfo node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSimpleTypeReference(Boo.Lang.Compiler.Ast.SimpleTypeReference node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnArrayTypeReference(Boo.Lang.Compiler.Ast.ArrayTypeReference node)
		{	
			if (EnterArrayTypeReference(node))
			{
				TypeReference currentElementTypeValue = node.ElementType;
				if (null != currentElementTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentElementTypeValue);
					if (!object.ReferenceEquals(newValue, currentElementTypeValue))
					{
						node.ElementType = newValue;
					}
				}
				IntegerLiteralExpression currentRankValue = node.Rank;
				if (null != currentRankValue)
				{			
					IntegerLiteralExpression newValue = (IntegerLiteralExpression)VisitNode(currentRankValue);
					if (!object.ReferenceEquals(newValue, currentRankValue))
					{
						node.Rank = newValue;
					}
				}

				LeaveArrayTypeReference(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterArrayTypeReference(Boo.Lang.Compiler.Ast.ArrayTypeReference node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveArrayTypeReference(Boo.Lang.Compiler.Ast.ArrayTypeReference node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnCallableTypeReference(Boo.Lang.Compiler.Ast.CallableTypeReference node)
		{	
			if (EnterCallableTypeReference(node))
			{
				Visit(node.Parameters);
				TypeReference currentReturnTypeValue = node.ReturnType;
				if (null != currentReturnTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentReturnTypeValue);
					if (!object.ReferenceEquals(newValue, currentReturnTypeValue))
					{
						node.ReturnType = newValue;
					}
				}

				LeaveCallableTypeReference(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterCallableTypeReference(Boo.Lang.Compiler.Ast.CallableTypeReference node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveCallableTypeReference(Boo.Lang.Compiler.Ast.CallableTypeReference node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnGenericTypeReference(Boo.Lang.Compiler.Ast.GenericTypeReference node)
		{	
			if (EnterGenericTypeReference(node))
			{
				Visit(node.GenericArguments);

				LeaveGenericTypeReference(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterGenericTypeReference(Boo.Lang.Compiler.Ast.GenericTypeReference node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveGenericTypeReference(Boo.Lang.Compiler.Ast.GenericTypeReference node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnGenericTypeDefinitionReference(Boo.Lang.Compiler.Ast.GenericTypeDefinitionReference node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnCallableDefinition(Boo.Lang.Compiler.Ast.CallableDefinition node)
		{	
			if (EnterCallableDefinition(node))
			{
				Visit(node.Attributes);
				Visit(node.Parameters);
				Visit(node.GenericParameters);
				TypeReference currentReturnTypeValue = node.ReturnType;
				if (null != currentReturnTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentReturnTypeValue);
					if (!object.ReferenceEquals(newValue, currentReturnTypeValue))
					{
						node.ReturnType = newValue;
					}
				}
				Visit(node.ReturnTypeAttributes);

				LeaveCallableDefinition(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterCallableDefinition(Boo.Lang.Compiler.Ast.CallableDefinition node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveCallableDefinition(Boo.Lang.Compiler.Ast.CallableDefinition node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnNamespaceDeclaration(Boo.Lang.Compiler.Ast.NamespaceDeclaration node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnImport(Boo.Lang.Compiler.Ast.Import node)
		{	
			if (EnterImport(node))
			{
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}
				ReferenceExpression currentAssemblyReferenceValue = node.AssemblyReference;
				if (null != currentAssemblyReferenceValue)
				{			
					ReferenceExpression newValue = (ReferenceExpression)VisitNode(currentAssemblyReferenceValue);
					if (!object.ReferenceEquals(newValue, currentAssemblyReferenceValue))
					{
						node.AssemblyReference = newValue;
					}
				}
				ReferenceExpression currentAliasValue = node.Alias;
				if (null != currentAliasValue)
				{			
					ReferenceExpression newValue = (ReferenceExpression)VisitNode(currentAliasValue);
					if (!object.ReferenceEquals(newValue, currentAliasValue))
					{
						node.Alias = newValue;
					}
				}

				LeaveImport(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterImport(Boo.Lang.Compiler.Ast.Import node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveImport(Boo.Lang.Compiler.Ast.Import node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnModule(Boo.Lang.Compiler.Ast.Module node)
		{	
			if (EnterModule(node))
			{
				Visit(node.Attributes);
				Visit(node.Members);
				Visit(node.BaseTypes);
				Visit(node.GenericParameters);
				NamespaceDeclaration currentNamespaceValue = node.Namespace;
				if (null != currentNamespaceValue)
				{			
					NamespaceDeclaration newValue = (NamespaceDeclaration)VisitNode(currentNamespaceValue);
					if (!object.ReferenceEquals(newValue, currentNamespaceValue))
					{
						node.Namespace = newValue;
					}
				}
				Visit(node.Imports);
				Block currentGlobalsValue = node.Globals;
				if (null != currentGlobalsValue)
				{			
					Block newValue = (Block)VisitNode(currentGlobalsValue);
					if (!object.ReferenceEquals(newValue, currentGlobalsValue))
					{
						node.Globals = newValue;
					}
				}
				Visit(node.AssemblyAttributes);

				LeaveModule(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterModule(Boo.Lang.Compiler.Ast.Module node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveModule(Boo.Lang.Compiler.Ast.Module node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnClassDefinition(Boo.Lang.Compiler.Ast.ClassDefinition node)
		{	
			if (EnterClassDefinition(node))
			{
				Visit(node.Attributes);
				Visit(node.Members);
				Visit(node.BaseTypes);
				Visit(node.GenericParameters);

				LeaveClassDefinition(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterClassDefinition(Boo.Lang.Compiler.Ast.ClassDefinition node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveClassDefinition(Boo.Lang.Compiler.Ast.ClassDefinition node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnStructDefinition(Boo.Lang.Compiler.Ast.StructDefinition node)
		{	
			if (EnterStructDefinition(node))
			{
				Visit(node.Attributes);
				Visit(node.Members);
				Visit(node.BaseTypes);
				Visit(node.GenericParameters);

				LeaveStructDefinition(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterStructDefinition(Boo.Lang.Compiler.Ast.StructDefinition node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveStructDefinition(Boo.Lang.Compiler.Ast.StructDefinition node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnInterfaceDefinition(Boo.Lang.Compiler.Ast.InterfaceDefinition node)
		{	
			if (EnterInterfaceDefinition(node))
			{
				Visit(node.Attributes);
				Visit(node.Members);
				Visit(node.BaseTypes);
				Visit(node.GenericParameters);

				LeaveInterfaceDefinition(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterInterfaceDefinition(Boo.Lang.Compiler.Ast.InterfaceDefinition node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveInterfaceDefinition(Boo.Lang.Compiler.Ast.InterfaceDefinition node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnEnumDefinition(Boo.Lang.Compiler.Ast.EnumDefinition node)
		{	
			if (EnterEnumDefinition(node))
			{
				Visit(node.Attributes);
				Visit(node.Members);
				Visit(node.BaseTypes);
				Visit(node.GenericParameters);

				LeaveEnumDefinition(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterEnumDefinition(Boo.Lang.Compiler.Ast.EnumDefinition node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveEnumDefinition(Boo.Lang.Compiler.Ast.EnumDefinition node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnEnumMember(Boo.Lang.Compiler.Ast.EnumMember node)
		{	
			if (EnterEnumMember(node))
			{
				Visit(node.Attributes);
				Expression currentInitializerValue = node.Initializer;
				if (null != currentInitializerValue)
				{			
					Expression newValue = (Expression)VisitNode(currentInitializerValue);
					if (!object.ReferenceEquals(newValue, currentInitializerValue))
					{
						node.Initializer = newValue;
					}
				}

				LeaveEnumMember(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterEnumMember(Boo.Lang.Compiler.Ast.EnumMember node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveEnumMember(Boo.Lang.Compiler.Ast.EnumMember node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnField(Boo.Lang.Compiler.Ast.Field node)
		{	
			if (EnterField(node))
			{
				Visit(node.Attributes);
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}
				Expression currentInitializerValue = node.Initializer;
				if (null != currentInitializerValue)
				{			
					Expression newValue = (Expression)VisitNode(currentInitializerValue);
					if (!object.ReferenceEquals(newValue, currentInitializerValue))
					{
						node.Initializer = newValue;
					}
				}

				LeaveField(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterField(Boo.Lang.Compiler.Ast.Field node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveField(Boo.Lang.Compiler.Ast.Field node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnProperty(Boo.Lang.Compiler.Ast.Property node)
		{	
			if (EnterProperty(node))
			{
				Visit(node.Attributes);
				Visit(node.Parameters);
				Method currentGetterValue = node.Getter;
				if (null != currentGetterValue)
				{			
					Method newValue = (Method)VisitNode(currentGetterValue);
					if (!object.ReferenceEquals(newValue, currentGetterValue))
					{
						node.Getter = newValue;
					}
				}
				Method currentSetterValue = node.Setter;
				if (null != currentSetterValue)
				{			
					Method newValue = (Method)VisitNode(currentSetterValue);
					if (!object.ReferenceEquals(newValue, currentSetterValue))
					{
						node.Setter = newValue;
					}
				}
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}
				ExplicitMemberInfo currentExplicitInfoValue = node.ExplicitInfo;
				if (null != currentExplicitInfoValue)
				{			
					ExplicitMemberInfo newValue = (ExplicitMemberInfo)VisitNode(currentExplicitInfoValue);
					if (!object.ReferenceEquals(newValue, currentExplicitInfoValue))
					{
						node.ExplicitInfo = newValue;
					}
				}

				LeaveProperty(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterProperty(Boo.Lang.Compiler.Ast.Property node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveProperty(Boo.Lang.Compiler.Ast.Property node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnEvent(Boo.Lang.Compiler.Ast.Event node)
		{	
			if (EnterEvent(node))
			{
				Visit(node.Attributes);
				Method currentAddValue = node.Add;
				if (null != currentAddValue)
				{			
					Method newValue = (Method)VisitNode(currentAddValue);
					if (!object.ReferenceEquals(newValue, currentAddValue))
					{
						node.Add = newValue;
					}
				}
				Method currentRemoveValue = node.Remove;
				if (null != currentRemoveValue)
				{			
					Method newValue = (Method)VisitNode(currentRemoveValue);
					if (!object.ReferenceEquals(newValue, currentRemoveValue))
					{
						node.Remove = newValue;
					}
				}
				Method currentRaiseValue = node.Raise;
				if (null != currentRaiseValue)
				{			
					Method newValue = (Method)VisitNode(currentRaiseValue);
					if (!object.ReferenceEquals(newValue, currentRaiseValue))
					{
						node.Raise = newValue;
					}
				}
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}

				LeaveEvent(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterEvent(Boo.Lang.Compiler.Ast.Event node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveEvent(Boo.Lang.Compiler.Ast.Event node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnLocal(Boo.Lang.Compiler.Ast.Local node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnBlockExpression(Boo.Lang.Compiler.Ast.BlockExpression node)
		{	
			if (EnterBlockExpression(node))
			{
				Visit(node.Parameters);
				TypeReference currentReturnTypeValue = node.ReturnType;
				if (null != currentReturnTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentReturnTypeValue);
					if (!object.ReferenceEquals(newValue, currentReturnTypeValue))
					{
						node.ReturnType = newValue;
					}
				}
				Block currentBodyValue = node.Body;
				if (null != currentBodyValue)
				{			
					Block newValue = (Block)VisitNode(currentBodyValue);
					if (!object.ReferenceEquals(newValue, currentBodyValue))
					{
						node.Body = newValue;
					}
				}

				LeaveBlockExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterBlockExpression(Boo.Lang.Compiler.Ast.BlockExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveBlockExpression(Boo.Lang.Compiler.Ast.BlockExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnMethod(Boo.Lang.Compiler.Ast.Method node)
		{	
			if (EnterMethod(node))
			{
				Visit(node.Attributes);
				Visit(node.Parameters);
				Visit(node.GenericParameters);
				TypeReference currentReturnTypeValue = node.ReturnType;
				if (null != currentReturnTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentReturnTypeValue);
					if (!object.ReferenceEquals(newValue, currentReturnTypeValue))
					{
						node.ReturnType = newValue;
					}
				}
				Visit(node.ReturnTypeAttributes);
				Block currentBodyValue = node.Body;
				if (null != currentBodyValue)
				{			
					Block newValue = (Block)VisitNode(currentBodyValue);
					if (!object.ReferenceEquals(newValue, currentBodyValue))
					{
						node.Body = newValue;
					}
				}
				Visit(node.Locals);
				ExplicitMemberInfo currentExplicitInfoValue = node.ExplicitInfo;
				if (null != currentExplicitInfoValue)
				{			
					ExplicitMemberInfo newValue = (ExplicitMemberInfo)VisitNode(currentExplicitInfoValue);
					if (!object.ReferenceEquals(newValue, currentExplicitInfoValue))
					{
						node.ExplicitInfo = newValue;
					}
				}

				LeaveMethod(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterMethod(Boo.Lang.Compiler.Ast.Method node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveMethod(Boo.Lang.Compiler.Ast.Method node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnConstructor(Boo.Lang.Compiler.Ast.Constructor node)
		{	
			if (EnterConstructor(node))
			{
				Visit(node.Attributes);
				Visit(node.Parameters);
				Visit(node.GenericParameters);
				TypeReference currentReturnTypeValue = node.ReturnType;
				if (null != currentReturnTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentReturnTypeValue);
					if (!object.ReferenceEquals(newValue, currentReturnTypeValue))
					{
						node.ReturnType = newValue;
					}
				}
				Visit(node.ReturnTypeAttributes);
				Block currentBodyValue = node.Body;
				if (null != currentBodyValue)
				{			
					Block newValue = (Block)VisitNode(currentBodyValue);
					if (!object.ReferenceEquals(newValue, currentBodyValue))
					{
						node.Body = newValue;
					}
				}
				Visit(node.Locals);
				ExplicitMemberInfo currentExplicitInfoValue = node.ExplicitInfo;
				if (null != currentExplicitInfoValue)
				{			
					ExplicitMemberInfo newValue = (ExplicitMemberInfo)VisitNode(currentExplicitInfoValue);
					if (!object.ReferenceEquals(newValue, currentExplicitInfoValue))
					{
						node.ExplicitInfo = newValue;
					}
				}

				LeaveConstructor(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterConstructor(Boo.Lang.Compiler.Ast.Constructor node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveConstructor(Boo.Lang.Compiler.Ast.Constructor node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnDestructor(Boo.Lang.Compiler.Ast.Destructor node)
		{	
			if (EnterDestructor(node))
			{
				Visit(node.Attributes);
				Visit(node.Parameters);
				Visit(node.GenericParameters);
				TypeReference currentReturnTypeValue = node.ReturnType;
				if (null != currentReturnTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentReturnTypeValue);
					if (!object.ReferenceEquals(newValue, currentReturnTypeValue))
					{
						node.ReturnType = newValue;
					}
				}
				Visit(node.ReturnTypeAttributes);
				Block currentBodyValue = node.Body;
				if (null != currentBodyValue)
				{			
					Block newValue = (Block)VisitNode(currentBodyValue);
					if (!object.ReferenceEquals(newValue, currentBodyValue))
					{
						node.Body = newValue;
					}
				}
				Visit(node.Locals);
				ExplicitMemberInfo currentExplicitInfoValue = node.ExplicitInfo;
				if (null != currentExplicitInfoValue)
				{			
					ExplicitMemberInfo newValue = (ExplicitMemberInfo)VisitNode(currentExplicitInfoValue);
					if (!object.ReferenceEquals(newValue, currentExplicitInfoValue))
					{
						node.ExplicitInfo = newValue;
					}
				}

				LeaveDestructor(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterDestructor(Boo.Lang.Compiler.Ast.Destructor node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveDestructor(Boo.Lang.Compiler.Ast.Destructor node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnParameterDeclaration(Boo.Lang.Compiler.Ast.ParameterDeclaration node)
		{	
			if (EnterParameterDeclaration(node))
			{
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}
				Visit(node.Attributes);

				LeaveParameterDeclaration(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterParameterDeclaration(Boo.Lang.Compiler.Ast.ParameterDeclaration node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveParameterDeclaration(Boo.Lang.Compiler.Ast.ParameterDeclaration node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnGenericParameterDeclaration(Boo.Lang.Compiler.Ast.GenericParameterDeclaration node)
		{	
			if (EnterGenericParameterDeclaration(node))
			{
				Visit(node.BaseTypes);

				LeaveGenericParameterDeclaration(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterGenericParameterDeclaration(Boo.Lang.Compiler.Ast.GenericParameterDeclaration node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveGenericParameterDeclaration(Boo.Lang.Compiler.Ast.GenericParameterDeclaration node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnDeclaration(Boo.Lang.Compiler.Ast.Declaration node)
		{	
			if (EnterDeclaration(node))
			{
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}

				LeaveDeclaration(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterDeclaration(Boo.Lang.Compiler.Ast.Declaration node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveDeclaration(Boo.Lang.Compiler.Ast.Declaration node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnAttribute(Boo.Lang.Compiler.Ast.Attribute node)
		{	
			if (EnterAttribute(node))
			{
				Visit(node.Arguments);
				Visit(node.NamedArguments);

				LeaveAttribute(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterAttribute(Boo.Lang.Compiler.Ast.Attribute node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveAttribute(Boo.Lang.Compiler.Ast.Attribute node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnStatementModifier(Boo.Lang.Compiler.Ast.StatementModifier node)
		{	
			if (EnterStatementModifier(node))
			{
				Expression currentConditionValue = node.Condition;
				if (null != currentConditionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentConditionValue);
					if (!object.ReferenceEquals(newValue, currentConditionValue))
					{
						node.Condition = newValue;
					}
				}

				LeaveStatementModifier(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterStatementModifier(Boo.Lang.Compiler.Ast.StatementModifier node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveStatementModifier(Boo.Lang.Compiler.Ast.StatementModifier node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnGotoStatement(Boo.Lang.Compiler.Ast.GotoStatement node)
		{	
			if (EnterGotoStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				ReferenceExpression currentLabelValue = node.Label;
				if (null != currentLabelValue)
				{			
					ReferenceExpression newValue = (ReferenceExpression)VisitNode(currentLabelValue);
					if (!object.ReferenceEquals(newValue, currentLabelValue))
					{
						node.Label = newValue;
					}
				}

				LeaveGotoStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterGotoStatement(Boo.Lang.Compiler.Ast.GotoStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveGotoStatement(Boo.Lang.Compiler.Ast.GotoStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnLabelStatement(Boo.Lang.Compiler.Ast.LabelStatement node)
		{	
			if (EnterLabelStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}

				LeaveLabelStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterLabelStatement(Boo.Lang.Compiler.Ast.LabelStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveLabelStatement(Boo.Lang.Compiler.Ast.LabelStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnBlock(Boo.Lang.Compiler.Ast.Block node)
		{	
			if (EnterBlock(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Visit(node.Statements);

				LeaveBlock(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterBlock(Boo.Lang.Compiler.Ast.Block node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveBlock(Boo.Lang.Compiler.Ast.Block node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnDeclarationStatement(Boo.Lang.Compiler.Ast.DeclarationStatement node)
		{	
			if (EnterDeclarationStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Declaration currentDeclarationValue = node.Declaration;
				if (null != currentDeclarationValue)
				{			
					Declaration newValue = (Declaration)VisitNode(currentDeclarationValue);
					if (!object.ReferenceEquals(newValue, currentDeclarationValue))
					{
						node.Declaration = newValue;
					}
				}
				Expression currentInitializerValue = node.Initializer;
				if (null != currentInitializerValue)
				{			
					Expression newValue = (Expression)VisitNode(currentInitializerValue);
					if (!object.ReferenceEquals(newValue, currentInitializerValue))
					{
						node.Initializer = newValue;
					}
				}

				LeaveDeclarationStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterDeclarationStatement(Boo.Lang.Compiler.Ast.DeclarationStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveDeclarationStatement(Boo.Lang.Compiler.Ast.DeclarationStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnMacroStatement(Boo.Lang.Compiler.Ast.MacroStatement node)
		{	
			if (EnterMacroStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Visit(node.Arguments);
				Block currentBodyValue = node.Body;
				if (null != currentBodyValue)
				{			
					Block newValue = (Block)VisitNode(currentBodyValue);
					if (!object.ReferenceEquals(newValue, currentBodyValue))
					{
						node.Body = newValue;
					}
				}

				LeaveMacroStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterMacroStatement(Boo.Lang.Compiler.Ast.MacroStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveMacroStatement(Boo.Lang.Compiler.Ast.MacroStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnTryStatement(Boo.Lang.Compiler.Ast.TryStatement node)
		{	
			if (EnterTryStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Block currentProtectedBlockValue = node.ProtectedBlock;
				if (null != currentProtectedBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentProtectedBlockValue);
					if (!object.ReferenceEquals(newValue, currentProtectedBlockValue))
					{
						node.ProtectedBlock = newValue;
					}
				}
				Visit(node.ExceptionHandlers);
				Block currentFailureBlockValue = node.FailureBlock;
				if (null != currentFailureBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentFailureBlockValue);
					if (!object.ReferenceEquals(newValue, currentFailureBlockValue))
					{
						node.FailureBlock = newValue;
					}
				}
				Block currentEnsureBlockValue = node.EnsureBlock;
				if (null != currentEnsureBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentEnsureBlockValue);
					if (!object.ReferenceEquals(newValue, currentEnsureBlockValue))
					{
						node.EnsureBlock = newValue;
					}
				}

				LeaveTryStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterTryStatement(Boo.Lang.Compiler.Ast.TryStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveTryStatement(Boo.Lang.Compiler.Ast.TryStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnExceptionHandler(Boo.Lang.Compiler.Ast.ExceptionHandler node)
		{	
			if (EnterExceptionHandler(node))
			{
				Declaration currentDeclarationValue = node.Declaration;
				if (null != currentDeclarationValue)
				{			
					Declaration newValue = (Declaration)VisitNode(currentDeclarationValue);
					if (!object.ReferenceEquals(newValue, currentDeclarationValue))
					{
						node.Declaration = newValue;
					}
				}
				Expression currentFilterConditionValue = node.FilterCondition;
				if (null != currentFilterConditionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentFilterConditionValue);
					if (!object.ReferenceEquals(newValue, currentFilterConditionValue))
					{
						node.FilterCondition = newValue;
					}
				}
				Block currentBlockValue = node.Block;
				if (null != currentBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentBlockValue);
					if (!object.ReferenceEquals(newValue, currentBlockValue))
					{
						node.Block = newValue;
					}
				}

				LeaveExceptionHandler(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterExceptionHandler(Boo.Lang.Compiler.Ast.ExceptionHandler node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveExceptionHandler(Boo.Lang.Compiler.Ast.ExceptionHandler node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnIfStatement(Boo.Lang.Compiler.Ast.IfStatement node)
		{	
			if (EnterIfStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Expression currentConditionValue = node.Condition;
				if (null != currentConditionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentConditionValue);
					if (!object.ReferenceEquals(newValue, currentConditionValue))
					{
						node.Condition = newValue;
					}
				}
				Block currentTrueBlockValue = node.TrueBlock;
				if (null != currentTrueBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentTrueBlockValue);
					if (!object.ReferenceEquals(newValue, currentTrueBlockValue))
					{
						node.TrueBlock = newValue;
					}
				}
				Block currentFalseBlockValue = node.FalseBlock;
				if (null != currentFalseBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentFalseBlockValue);
					if (!object.ReferenceEquals(newValue, currentFalseBlockValue))
					{
						node.FalseBlock = newValue;
					}
				}

				LeaveIfStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterIfStatement(Boo.Lang.Compiler.Ast.IfStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveIfStatement(Boo.Lang.Compiler.Ast.IfStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnUnlessStatement(Boo.Lang.Compiler.Ast.UnlessStatement node)
		{	
			if (EnterUnlessStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Expression currentConditionValue = node.Condition;
				if (null != currentConditionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentConditionValue);
					if (!object.ReferenceEquals(newValue, currentConditionValue))
					{
						node.Condition = newValue;
					}
				}
				Block currentBlockValue = node.Block;
				if (null != currentBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentBlockValue);
					if (!object.ReferenceEquals(newValue, currentBlockValue))
					{
						node.Block = newValue;
					}
				}

				LeaveUnlessStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterUnlessStatement(Boo.Lang.Compiler.Ast.UnlessStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveUnlessStatement(Boo.Lang.Compiler.Ast.UnlessStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnForStatement(Boo.Lang.Compiler.Ast.ForStatement node)
		{	
			if (EnterForStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Visit(node.Declarations);
				Expression currentIteratorValue = node.Iterator;
				if (null != currentIteratorValue)
				{			
					Expression newValue = (Expression)VisitNode(currentIteratorValue);
					if (!object.ReferenceEquals(newValue, currentIteratorValue))
					{
						node.Iterator = newValue;
					}
				}
				Block currentBlockValue = node.Block;
				if (null != currentBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentBlockValue);
					if (!object.ReferenceEquals(newValue, currentBlockValue))
					{
						node.Block = newValue;
					}
				}
				Block currentOrBlockValue = node.OrBlock;
				if (null != currentOrBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentOrBlockValue);
					if (!object.ReferenceEquals(newValue, currentOrBlockValue))
					{
						node.OrBlock = newValue;
					}
				}
				Block currentThenBlockValue = node.ThenBlock;
				if (null != currentThenBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentThenBlockValue);
					if (!object.ReferenceEquals(newValue, currentThenBlockValue))
					{
						node.ThenBlock = newValue;
					}
				}

				LeaveForStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterForStatement(Boo.Lang.Compiler.Ast.ForStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveForStatement(Boo.Lang.Compiler.Ast.ForStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnWhileStatement(Boo.Lang.Compiler.Ast.WhileStatement node)
		{	
			if (EnterWhileStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Expression currentConditionValue = node.Condition;
				if (null != currentConditionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentConditionValue);
					if (!object.ReferenceEquals(newValue, currentConditionValue))
					{
						node.Condition = newValue;
					}
				}
				Block currentBlockValue = node.Block;
				if (null != currentBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentBlockValue);
					if (!object.ReferenceEquals(newValue, currentBlockValue))
					{
						node.Block = newValue;
					}
				}
				Block currentOrBlockValue = node.OrBlock;
				if (null != currentOrBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentOrBlockValue);
					if (!object.ReferenceEquals(newValue, currentOrBlockValue))
					{
						node.OrBlock = newValue;
					}
				}
				Block currentThenBlockValue = node.ThenBlock;
				if (null != currentThenBlockValue)
				{			
					Block newValue = (Block)VisitNode(currentThenBlockValue);
					if (!object.ReferenceEquals(newValue, currentThenBlockValue))
					{
						node.ThenBlock = newValue;
					}
				}

				LeaveWhileStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterWhileStatement(Boo.Lang.Compiler.Ast.WhileStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveWhileStatement(Boo.Lang.Compiler.Ast.WhileStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnBreakStatement(Boo.Lang.Compiler.Ast.BreakStatement node)
		{	
			if (EnterBreakStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}

				LeaveBreakStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterBreakStatement(Boo.Lang.Compiler.Ast.BreakStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveBreakStatement(Boo.Lang.Compiler.Ast.BreakStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnContinueStatement(Boo.Lang.Compiler.Ast.ContinueStatement node)
		{	
			if (EnterContinueStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}

				LeaveContinueStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterContinueStatement(Boo.Lang.Compiler.Ast.ContinueStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveContinueStatement(Boo.Lang.Compiler.Ast.ContinueStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnReturnStatement(Boo.Lang.Compiler.Ast.ReturnStatement node)
		{	
			if (EnterReturnStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}

				LeaveReturnStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterReturnStatement(Boo.Lang.Compiler.Ast.ReturnStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveReturnStatement(Boo.Lang.Compiler.Ast.ReturnStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnYieldStatement(Boo.Lang.Compiler.Ast.YieldStatement node)
		{	
			if (EnterYieldStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}

				LeaveYieldStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterYieldStatement(Boo.Lang.Compiler.Ast.YieldStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveYieldStatement(Boo.Lang.Compiler.Ast.YieldStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnRaiseStatement(Boo.Lang.Compiler.Ast.RaiseStatement node)
		{	
			if (EnterRaiseStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Expression currentExceptionValue = node.Exception;
				if (null != currentExceptionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExceptionValue);
					if (!object.ReferenceEquals(newValue, currentExceptionValue))
					{
						node.Exception = newValue;
					}
				}

				LeaveRaiseStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterRaiseStatement(Boo.Lang.Compiler.Ast.RaiseStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveRaiseStatement(Boo.Lang.Compiler.Ast.RaiseStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnUnpackStatement(Boo.Lang.Compiler.Ast.UnpackStatement node)
		{	
			if (EnterUnpackStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Visit(node.Declarations);
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}

				LeaveUnpackStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterUnpackStatement(Boo.Lang.Compiler.Ast.UnpackStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveUnpackStatement(Boo.Lang.Compiler.Ast.UnpackStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnExpressionStatement(Boo.Lang.Compiler.Ast.ExpressionStatement node)
		{	
			if (EnterExpressionStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}

				LeaveExpressionStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterExpressionStatement(Boo.Lang.Compiler.Ast.ExpressionStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveExpressionStatement(Boo.Lang.Compiler.Ast.ExpressionStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnOmittedExpression(Boo.Lang.Compiler.Ast.OmittedExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnExpressionPair(Boo.Lang.Compiler.Ast.ExpressionPair node)
		{	
			if (EnterExpressionPair(node))
			{
				Expression currentFirstValue = node.First;
				if (null != currentFirstValue)
				{			
					Expression newValue = (Expression)VisitNode(currentFirstValue);
					if (!object.ReferenceEquals(newValue, currentFirstValue))
					{
						node.First = newValue;
					}
				}
				Expression currentSecondValue = node.Second;
				if (null != currentSecondValue)
				{			
					Expression newValue = (Expression)VisitNode(currentSecondValue);
					if (!object.ReferenceEquals(newValue, currentSecondValue))
					{
						node.Second = newValue;
					}
				}

				LeaveExpressionPair(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterExpressionPair(Boo.Lang.Compiler.Ast.ExpressionPair node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveExpressionPair(Boo.Lang.Compiler.Ast.ExpressionPair node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnMethodInvocationExpression(Boo.Lang.Compiler.Ast.MethodInvocationExpression node)
		{	
			if (EnterMethodInvocationExpression(node))
			{
				Expression currentTargetValue = node.Target;
				if (null != currentTargetValue)
				{			
					Expression newValue = (Expression)VisitNode(currentTargetValue);
					if (!object.ReferenceEquals(newValue, currentTargetValue))
					{
						node.Target = newValue;
					}
				}
				Visit(node.Arguments);
				Visit(node.NamedArguments);

				LeaveMethodInvocationExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterMethodInvocationExpression(Boo.Lang.Compiler.Ast.MethodInvocationExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveMethodInvocationExpression(Boo.Lang.Compiler.Ast.MethodInvocationExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnUnaryExpression(Boo.Lang.Compiler.Ast.UnaryExpression node)
		{	
			if (EnterUnaryExpression(node))
			{
				Expression currentOperandValue = node.Operand;
				if (null != currentOperandValue)
				{			
					Expression newValue = (Expression)VisitNode(currentOperandValue);
					if (!object.ReferenceEquals(newValue, currentOperandValue))
					{
						node.Operand = newValue;
					}
				}

				LeaveUnaryExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterUnaryExpression(Boo.Lang.Compiler.Ast.UnaryExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveUnaryExpression(Boo.Lang.Compiler.Ast.UnaryExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnBinaryExpression(Boo.Lang.Compiler.Ast.BinaryExpression node)
		{	
			if (EnterBinaryExpression(node))
			{
				Expression currentLeftValue = node.Left;
				if (null != currentLeftValue)
				{			
					Expression newValue = (Expression)VisitNode(currentLeftValue);
					if (!object.ReferenceEquals(newValue, currentLeftValue))
					{
						node.Left = newValue;
					}
				}
				Expression currentRightValue = node.Right;
				if (null != currentRightValue)
				{			
					Expression newValue = (Expression)VisitNode(currentRightValue);
					if (!object.ReferenceEquals(newValue, currentRightValue))
					{
						node.Right = newValue;
					}
				}

				LeaveBinaryExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterBinaryExpression(Boo.Lang.Compiler.Ast.BinaryExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveBinaryExpression(Boo.Lang.Compiler.Ast.BinaryExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnConditionalExpression(Boo.Lang.Compiler.Ast.ConditionalExpression node)
		{	
			if (EnterConditionalExpression(node))
			{
				Expression currentConditionValue = node.Condition;
				if (null != currentConditionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentConditionValue);
					if (!object.ReferenceEquals(newValue, currentConditionValue))
					{
						node.Condition = newValue;
					}
				}
				Expression currentTrueValueValue = node.TrueValue;
				if (null != currentTrueValueValue)
				{			
					Expression newValue = (Expression)VisitNode(currentTrueValueValue);
					if (!object.ReferenceEquals(newValue, currentTrueValueValue))
					{
						node.TrueValue = newValue;
					}
				}
				Expression currentFalseValueValue = node.FalseValue;
				if (null != currentFalseValueValue)
				{			
					Expression newValue = (Expression)VisitNode(currentFalseValueValue);
					if (!object.ReferenceEquals(newValue, currentFalseValueValue))
					{
						node.FalseValue = newValue;
					}
				}

				LeaveConditionalExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterConditionalExpression(Boo.Lang.Compiler.Ast.ConditionalExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveConditionalExpression(Boo.Lang.Compiler.Ast.ConditionalExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnReferenceExpression(Boo.Lang.Compiler.Ast.ReferenceExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnMemberReferenceExpression(Boo.Lang.Compiler.Ast.MemberReferenceExpression node)
		{	
			if (EnterMemberReferenceExpression(node))
			{
				Expression currentTargetValue = node.Target;
				if (null != currentTargetValue)
				{			
					Expression newValue = (Expression)VisitNode(currentTargetValue);
					if (!object.ReferenceEquals(newValue, currentTargetValue))
					{
						node.Target = newValue;
					}
				}

				LeaveMemberReferenceExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterMemberReferenceExpression(Boo.Lang.Compiler.Ast.MemberReferenceExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveMemberReferenceExpression(Boo.Lang.Compiler.Ast.MemberReferenceExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnGenericReferenceExpression(Boo.Lang.Compiler.Ast.GenericReferenceExpression node)
		{	
			if (EnterGenericReferenceExpression(node))
			{
				Expression currentTargetValue = node.Target;
				if (null != currentTargetValue)
				{			
					Expression newValue = (Expression)VisitNode(currentTargetValue);
					if (!object.ReferenceEquals(newValue, currentTargetValue))
					{
						node.Target = newValue;
					}
				}
				Visit(node.GenericArguments);

				LeaveGenericReferenceExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterGenericReferenceExpression(Boo.Lang.Compiler.Ast.GenericReferenceExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveGenericReferenceExpression(Boo.Lang.Compiler.Ast.GenericReferenceExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnQuasiquoteExpression(Boo.Lang.Compiler.Ast.QuasiquoteExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnStringLiteralExpression(Boo.Lang.Compiler.Ast.StringLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnCharLiteralExpression(Boo.Lang.Compiler.Ast.CharLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnTimeSpanLiteralExpression(Boo.Lang.Compiler.Ast.TimeSpanLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnIntegerLiteralExpression(Boo.Lang.Compiler.Ast.IntegerLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnDecimalLiteralExpression(Boo.Lang.Compiler.Ast.DecimalLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnDoubleLiteralExpression(Boo.Lang.Compiler.Ast.DoubleLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnNullLiteralExpression(Boo.Lang.Compiler.Ast.NullLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSelfLiteralExpression(Boo.Lang.Compiler.Ast.SelfLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSuperLiteralExpression(Boo.Lang.Compiler.Ast.SuperLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnBoolLiteralExpression(Boo.Lang.Compiler.Ast.BoolLiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnRELiteralExpression(Boo.Lang.Compiler.Ast.RELiteralExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSpliceExpression(Boo.Lang.Compiler.Ast.SpliceExpression node)
		{	
			if (EnterSpliceExpression(node))
			{
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}

				LeaveSpliceExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterSpliceExpression(Boo.Lang.Compiler.Ast.SpliceExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveSpliceExpression(Boo.Lang.Compiler.Ast.SpliceExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSpliceTypeReference(Boo.Lang.Compiler.Ast.SpliceTypeReference node)
		{	
			if (EnterSpliceTypeReference(node))
			{
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}

				LeaveSpliceTypeReference(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterSpliceTypeReference(Boo.Lang.Compiler.Ast.SpliceTypeReference node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveSpliceTypeReference(Boo.Lang.Compiler.Ast.SpliceTypeReference node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSpliceMemberReferenceExpression(Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression node)
		{	
			if (EnterSpliceMemberReferenceExpression(node))
			{
				Expression currentTargetValue = node.Target;
				if (null != currentTargetValue)
				{			
					Expression newValue = (Expression)VisitNode(currentTargetValue);
					if (!object.ReferenceEquals(newValue, currentTargetValue))
					{
						node.Target = newValue;
					}
				}
				Expression currentNameExpressionValue = node.NameExpression;
				if (null != currentNameExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentNameExpressionValue);
					if (!object.ReferenceEquals(newValue, currentNameExpressionValue))
					{
						node.NameExpression = newValue;
					}
				}

				LeaveSpliceMemberReferenceExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterSpliceMemberReferenceExpression(Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveSpliceMemberReferenceExpression(Boo.Lang.Compiler.Ast.SpliceMemberReferenceExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSpliceTypeMember(Boo.Lang.Compiler.Ast.SpliceTypeMember node)
		{	
			if (EnterSpliceTypeMember(node))
			{
				Visit(node.Attributes);
				TypeMember currentTypeMemberValue = node.TypeMember;
				if (null != currentTypeMemberValue)
				{			
					TypeMember newValue = (TypeMember)VisitNode(currentTypeMemberValue);
					if (!object.ReferenceEquals(newValue, currentTypeMemberValue))
					{
						node.TypeMember = newValue;
					}
				}
				Expression currentNameExpressionValue = node.NameExpression;
				if (null != currentNameExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentNameExpressionValue);
					if (!object.ReferenceEquals(newValue, currentNameExpressionValue))
					{
						node.NameExpression = newValue;
					}
				}

				LeaveSpliceTypeMember(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterSpliceTypeMember(Boo.Lang.Compiler.Ast.SpliceTypeMember node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveSpliceTypeMember(Boo.Lang.Compiler.Ast.SpliceTypeMember node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSpliceTypeDefinitionBody(Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody node)
		{	
			if (EnterSpliceTypeDefinitionBody(node))
			{
				Visit(node.Attributes);
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}

				LeaveSpliceTypeDefinitionBody(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterSpliceTypeDefinitionBody(Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveSpliceTypeDefinitionBody(Boo.Lang.Compiler.Ast.SpliceTypeDefinitionBody node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSpliceParameterDeclaration(Boo.Lang.Compiler.Ast.SpliceParameterDeclaration node)
		{	
			if (EnterSpliceParameterDeclaration(node))
			{
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}
				Visit(node.Attributes);
				ParameterDeclaration currentParameterDeclarationValue = node.ParameterDeclaration;
				if (null != currentParameterDeclarationValue)
				{			
					ParameterDeclaration newValue = (ParameterDeclaration)VisitNode(currentParameterDeclarationValue);
					if (!object.ReferenceEquals(newValue, currentParameterDeclarationValue))
					{
						node.ParameterDeclaration = newValue;
					}
				}
				Expression currentNameExpressionValue = node.NameExpression;
				if (null != currentNameExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentNameExpressionValue);
					if (!object.ReferenceEquals(newValue, currentNameExpressionValue))
					{
						node.NameExpression = newValue;
					}
				}

				LeaveSpliceParameterDeclaration(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterSpliceParameterDeclaration(Boo.Lang.Compiler.Ast.SpliceParameterDeclaration node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveSpliceParameterDeclaration(Boo.Lang.Compiler.Ast.SpliceParameterDeclaration node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnExpressionInterpolationExpression(Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression node)
		{	
			if (EnterExpressionInterpolationExpression(node))
			{
				Visit(node.Expressions);

				LeaveExpressionInterpolationExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterExpressionInterpolationExpression(Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveExpressionInterpolationExpression(Boo.Lang.Compiler.Ast.ExpressionInterpolationExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnHashLiteralExpression(Boo.Lang.Compiler.Ast.HashLiteralExpression node)
		{	
			if (EnterHashLiteralExpression(node))
			{
				Visit(node.Items);

				LeaveHashLiteralExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterHashLiteralExpression(Boo.Lang.Compiler.Ast.HashLiteralExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveHashLiteralExpression(Boo.Lang.Compiler.Ast.HashLiteralExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnListLiteralExpression(Boo.Lang.Compiler.Ast.ListLiteralExpression node)
		{	
			if (EnterListLiteralExpression(node))
			{
				Visit(node.Items);

				LeaveListLiteralExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterListLiteralExpression(Boo.Lang.Compiler.Ast.ListLiteralExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveListLiteralExpression(Boo.Lang.Compiler.Ast.ListLiteralExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnCollectionInitializationExpression(Boo.Lang.Compiler.Ast.CollectionInitializationExpression node)
		{	
			if (EnterCollectionInitializationExpression(node))
			{
				Expression currentCollectionValue = node.Collection;
				if (null != currentCollectionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentCollectionValue);
					if (!object.ReferenceEquals(newValue, currentCollectionValue))
					{
						node.Collection = newValue;
					}
				}
				Expression currentInitializerValue = node.Initializer;
				if (null != currentInitializerValue)
				{			
					Expression newValue = (Expression)VisitNode(currentInitializerValue);
					if (!object.ReferenceEquals(newValue, currentInitializerValue))
					{
						node.Initializer = newValue;
					}
				}

				LeaveCollectionInitializationExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterCollectionInitializationExpression(Boo.Lang.Compiler.Ast.CollectionInitializationExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveCollectionInitializationExpression(Boo.Lang.Compiler.Ast.CollectionInitializationExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnArrayLiteralExpression(Boo.Lang.Compiler.Ast.ArrayLiteralExpression node)
		{	
			if (EnterArrayLiteralExpression(node))
			{
				Visit(node.Items);
				ArrayTypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					ArrayTypeReference newValue = (ArrayTypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}

				LeaveArrayLiteralExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterArrayLiteralExpression(Boo.Lang.Compiler.Ast.ArrayLiteralExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveArrayLiteralExpression(Boo.Lang.Compiler.Ast.ArrayLiteralExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnGeneratorExpression(Boo.Lang.Compiler.Ast.GeneratorExpression node)
		{	
			if (EnterGeneratorExpression(node))
			{
				Expression currentExpressionValue = node.Expression;
				if (null != currentExpressionValue)
				{			
					Expression newValue = (Expression)VisitNode(currentExpressionValue);
					if (!object.ReferenceEquals(newValue, currentExpressionValue))
					{
						node.Expression = newValue;
					}
				}
				Visit(node.Declarations);
				Expression currentIteratorValue = node.Iterator;
				if (null != currentIteratorValue)
				{			
					Expression newValue = (Expression)VisitNode(currentIteratorValue);
					if (!object.ReferenceEquals(newValue, currentIteratorValue))
					{
						node.Iterator = newValue;
					}
				}
				StatementModifier currentFilterValue = node.Filter;
				if (null != currentFilterValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentFilterValue);
					if (!object.ReferenceEquals(newValue, currentFilterValue))
					{
						node.Filter = newValue;
					}
				}

				LeaveGeneratorExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterGeneratorExpression(Boo.Lang.Compiler.Ast.GeneratorExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveGeneratorExpression(Boo.Lang.Compiler.Ast.GeneratorExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnExtendedGeneratorExpression(Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression node)
		{	
			if (EnterExtendedGeneratorExpression(node))
			{
				Visit(node.Items);

				LeaveExtendedGeneratorExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterExtendedGeneratorExpression(Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveExtendedGeneratorExpression(Boo.Lang.Compiler.Ast.ExtendedGeneratorExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSlice(Boo.Lang.Compiler.Ast.Slice node)
		{	
			if (EnterSlice(node))
			{
				Expression currentBeginValue = node.Begin;
				if (null != currentBeginValue)
				{			
					Expression newValue = (Expression)VisitNode(currentBeginValue);
					if (!object.ReferenceEquals(newValue, currentBeginValue))
					{
						node.Begin = newValue;
					}
				}
				Expression currentEndValue = node.End;
				if (null != currentEndValue)
				{			
					Expression newValue = (Expression)VisitNode(currentEndValue);
					if (!object.ReferenceEquals(newValue, currentEndValue))
					{
						node.End = newValue;
					}
				}
				Expression currentStepValue = node.Step;
				if (null != currentStepValue)
				{			
					Expression newValue = (Expression)VisitNode(currentStepValue);
					if (!object.ReferenceEquals(newValue, currentStepValue))
					{
						node.Step = newValue;
					}
				}

				LeaveSlice(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterSlice(Boo.Lang.Compiler.Ast.Slice node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveSlice(Boo.Lang.Compiler.Ast.Slice node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnSlicingExpression(Boo.Lang.Compiler.Ast.SlicingExpression node)
		{	
			if (EnterSlicingExpression(node))
			{
				Expression currentTargetValue = node.Target;
				if (null != currentTargetValue)
				{			
					Expression newValue = (Expression)VisitNode(currentTargetValue);
					if (!object.ReferenceEquals(newValue, currentTargetValue))
					{
						node.Target = newValue;
					}
				}
				Visit(node.Indices);

				LeaveSlicingExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterSlicingExpression(Boo.Lang.Compiler.Ast.SlicingExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveSlicingExpression(Boo.Lang.Compiler.Ast.SlicingExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnTryCastExpression(Boo.Lang.Compiler.Ast.TryCastExpression node)
		{	
			if (EnterTryCastExpression(node))
			{
				Expression currentTargetValue = node.Target;
				if (null != currentTargetValue)
				{			
					Expression newValue = (Expression)VisitNode(currentTargetValue);
					if (!object.ReferenceEquals(newValue, currentTargetValue))
					{
						node.Target = newValue;
					}
				}
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}

				LeaveTryCastExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterTryCastExpression(Boo.Lang.Compiler.Ast.TryCastExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveTryCastExpression(Boo.Lang.Compiler.Ast.TryCastExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnCastExpression(Boo.Lang.Compiler.Ast.CastExpression node)
		{	
			if (EnterCastExpression(node))
			{
				Expression currentTargetValue = node.Target;
				if (null != currentTargetValue)
				{			
					Expression newValue = (Expression)VisitNode(currentTargetValue);
					if (!object.ReferenceEquals(newValue, currentTargetValue))
					{
						node.Target = newValue;
					}
				}
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}

				LeaveCastExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterCastExpression(Boo.Lang.Compiler.Ast.CastExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveCastExpression(Boo.Lang.Compiler.Ast.CastExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnTypeofExpression(Boo.Lang.Compiler.Ast.TypeofExpression node)
		{	
			if (EnterTypeofExpression(node))
			{
				TypeReference currentTypeValue = node.Type;
				if (null != currentTypeValue)
				{			
					TypeReference newValue = (TypeReference)VisitNode(currentTypeValue);
					if (!object.ReferenceEquals(newValue, currentTypeValue))
					{
						node.Type = newValue;
					}
				}

				LeaveTypeofExpression(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterTypeofExpression(Boo.Lang.Compiler.Ast.TypeofExpression node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveTypeofExpression(Boo.Lang.Compiler.Ast.TypeofExpression node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnCustomStatement(Boo.Lang.Compiler.Ast.CustomStatement node)
		{	
			if (EnterCustomStatement(node))
			{
				StatementModifier currentModifierValue = node.Modifier;
				if (null != currentModifierValue)
				{			
					StatementModifier newValue = (StatementModifier)VisitNode(currentModifierValue);
					if (!object.ReferenceEquals(newValue, currentModifierValue))
					{
						node.Modifier = newValue;
					}
				}

				LeaveCustomStatement(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterCustomStatement(Boo.Lang.Compiler.Ast.CustomStatement node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveCustomStatement(Boo.Lang.Compiler.Ast.CustomStatement node)
		{
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnCustomExpression(Boo.Lang.Compiler.Ast.CustomExpression node)
		{	
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void OnStatementTypeMember(Boo.Lang.Compiler.Ast.StatementTypeMember node)
		{	
			if (EnterStatementTypeMember(node))
			{
				Visit(node.Attributes);
				Statement currentStatementValue = node.Statement;
				if (null != currentStatementValue)
				{			
					Statement newValue = (Statement)VisitNode(currentStatementValue);
					if (!object.ReferenceEquals(newValue, currentStatementValue))
					{
						node.Statement = newValue;
					}
				}

				LeaveStatementTypeMember(node);
			}
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual bool EnterStatementTypeMember(Boo.Lang.Compiler.Ast.StatementTypeMember node)
		{
			return true;
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("astgen.boo", "1")]
		public virtual void LeaveStatementTypeMember(Boo.Lang.Compiler.Ast.StatementTypeMember node)
		{
		}

	}
}
